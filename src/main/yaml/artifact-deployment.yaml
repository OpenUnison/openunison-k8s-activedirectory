---
apiVersion: v1
data:
  deploy.js: "//    Copyright 2018 Tremolo Security, Inc.\n// \n//    Licensed under\
    \ the Apache License, Version 2.0 (the \"License\");\n//    you may not use this\
    \ file except in compliance with the License.\n//    You may obtain a copy of\
    \ the License at\n// \n//        http://www.apache.org/licenses/LICENSE-2.0\n\
    // \n//    Unless required by applicable law or agreed to in writing, software\n\
    //    distributed under the License is distributed on an \"AS IS\" BASIS,\n//\
    \    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\
    //    See the License for the specific language governing permissions and\n//\
    \    limitations under the License.\n\nprint(\"Loading CertUtils\");\nvar CertUtils\
    \ = Java.type(\"com.tremolosecurity.kubernetes.artifacts.util.CertUtils\");\n\n\
    print(\"Creating openunison keystore\");\n\nksPassword = inProp['unisonKeystorePassword'];\n\
    ouKs = Java.type(\"java.security.KeyStore\").getInstance(\"PKCS12\");\nouKs.load(null,ksPassword.toCharArray());\n\
    \nuse_k8s_cm = inProp['USE_K8S_CM'] == \"true\";\n\nprint(\"Generating client\
    \ certificate for activemq\");\namqCertInfo = {\n    \"serverName\":\"amq-client\"\
    ,\n    \"ou\":\"kubernetes\",\n    \"o\":\"tremolo\",\n    \"l\":\"cloud\",\n\
    \    \"st\":\"cncf\",\n    \"c\":\"ea\",\n    \"caCert\":false\n}\n\nvar amqClientx509data\
    \ = CertUtils.createCertificate(amqCertInfo);\n\nCertUtils.saveX509ToKeystore(ouKs,ksPassword,\"\
    amq-client\",amqClientx509data);\n\nprint(\"generate the amq keystore\");\n\n\
    amqKS = Java.type(\"java.security.KeyStore\").getInstance(\"PKCS12\");\namqKS.load(null,ksPassword.toCharArray());\n\
    \nprint(\"trusting the amq client cert\");\namqKS.setCertificateEntry('trusted-amq-client',ouKs.getCertificate('amq-client'));\n\
    \nprint(\"generating the server side certificate\");\n\namqSrvCertInfo = {\n \
    \ \"serverName\":\"amq.openunison.openunison.svc.cluster.local\",\n  \"ou\":\"\
    kubernetes\",\n  \"o\":\"tremolo\",\n  \"l\":\"cloud\",\n  \"st\":\"cncf\",\n\
    \  \"c\":\"ea\",\n  \"caCert\":false\n}\n\nvar amqSrvx509data = CertUtils.createCertificate(amqSrvCertInfo);\n\
    \nif (use_k8s_cm) {\n  print(\"create csr for activemq\");\n\n  amqCsrReq = {\n\
    \    \"apiVersion\": \"certificates.k8s.io/v1beta1\",\n    \"kind\": \"CertificateSigningRequest\"\
    ,\n    \"metadata\": {\n      \"name\": \"amq.openunison.svc.cluster.local\",\n\
    \    },\n    \"spec\": {\n      \"request\": java.util.Base64.getEncoder().encodeToString(CertUtils.generateCSR(amqSrvx509data).getBytes(\"\
    utf-8\")),\n      \"usages\": [\n        \"digital signature\",\n        \"key\
    \ encipherment\",\n        \"server auth\"\n      ]\n    }\n  };\n\n  print(\"\
    Requesting amq certificate\");\n  apiResp = k8s.postWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests',JSON.stringify(amqCsrReq));\n\
    \n  print(\"Approving amq certificate\");\n  approveReq = JSON.parse(apiResp.data);\n\
    \  approveReq.status.conditions = [\n    {\n        \"type\":\"Approved\",\n \
    \       \"reason\":\"OpenUnison Deployment\",\n        \"message\":\"This CSR\
    \ was approved by the OpenUnison artifact deployment job\"\n    }\n  ];\n\n  apiResp\
    \ = k8s.putWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/amq.openunison.svc.cluster.local/approval',JSON.stringify(approveReq));\n\
    \  print(\"Retrieving amq certificate from API server\");\n  apiResp = k8s.callWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/amq.openunison.svc.cluster.local','java.util.Base64.getDecoder().decode(JSON.parse(ws_response_json).status.certificate);check_ws_response=true;',10);\n\
    \  print(apiResp.data);\n  certResp = JSON.parse(apiResp.data);\n  b64cert = certResp.status.certificate;\n\
    \  CertUtils.importSignedCert(amqSrvx509data,b64cert);\n} else {\n  //not using\
    \ CM, so store the amq cert directly into the openunison keystore\n  ouKs.setCertificateEntry('trusted-amq-server',amqSrvx509data.getCertificate());\n\
    }\n\nprint(\"Saving amq certificate to amq keystore\");\nCertUtils.saveX509ToKeystore(amqKS,ksPassword,\"\
    broker\",amqSrvx509data);\n\n\n\n\n\n\n\nprint(\"Generating openunison tls certificate\"\
    );\ncertInfo = {\n    \"serverName\":\"openunison.openunison.svc.cluster.local\"\
    ,\n    \"ou\":\"kubernetes\",\n    \"o\":\"tremolo\",\n    \"l\":\"cloud\",\n\
    \    \"st\":\"cncf\",\n    \"c\":\"ea\",\n    \"caCert\":false\n}\n\nvar x509data\
    \ = CertUtils.createCertificate(certInfo);\n\nif (use_k8s_cm) {\n  print(\"Creating\
    \ CSR for API server\");\n\n\n\n  csrReq = {\n      \"apiVersion\": \"certificates.k8s.io/v1beta1\"\
    ,\n      \"kind\": \"CertificateSigningRequest\",\n      \"metadata\": {\n   \
    \     \"name\": \"openunison.openunison.svc.cluster.local\",\n      },\n     \
    \ \"spec\": {\n        \"request\": java.util.Base64.getEncoder().encodeToString(CertUtils.generateCSR(x509data).getBytes(\"\
    utf-8\")),\n        \"usages\": [\n          \"digital signature\",\n        \
    \  \"key encipherment\",\n          \"server auth\"\n        ]\n      }\n    };\n\
    \n  print(\"Requesting certificate\");\n  apiResp = k8s.postWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests',JSON.stringify(csrReq));\n\
    \n  print(\"Approving certificate\");\n  approveReq = JSON.parse(apiResp.data);\n\
    \  approveReq.status.conditions = [\n      {\n          \"type\":\"Approved\"\
    ,\n          \"reason\":\"OpenUnison Deployment\",\n          \"message\":\"This\
    \ CSR was approved by the OpenUnison artifact deployment job\"\n      }\n  ];\n\
    \n  apiResp = k8s.putWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/openunison.openunison.svc.cluster.local/approval',JSON.stringify(approveReq));\n\
    \  print(\"Retrieving certificate from API server\");\n  apiResp = k8s.callWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/openunison.openunison.svc.cluster.local','java.util.Base64.getDecoder().decode(JSON.parse(ws_response_json).status.certificate);check_ws_response=true;',10);\n\
    \  print(apiResp.data);\n  certResp = JSON.parse(apiResp.data);\n  b64cert = certResp.status.certificate;\n\
    \  CertUtils.importSignedCert(x509data,b64cert);\n}\n\nprint(\"Saving certificate\
    \ to keystore\");\nCertUtils.saveX509ToKeystore(ouKs,ksPassword,\"unison-tls\"\
    ,x509data);\nCertUtils.createKey(ouKs,\"session-unison\",ksPassword);\nCertUtils.createKey(ouKs,\"\
    lastmile-oidc\",ksPassword);\n\nprint(\"Generating OIDC Certificate\");\n\ncertInfo\
    \ = {\n    \"serverName\":\"unison-saml2-rp-sig\",\n    \"ou\":\"kubernetes\"\
    ,\n    \"o\":\"tremolo\",\n    \"l\":\"cloud\",\n    \"st\":\"cncf\",\n    \"\
    c\":\"ea\",\n    \"caCert\":false\n}\n\nx509data = CertUtils.createCertificate(certInfo);\n\
    CertUtils.saveX509ToKeystore(ouKs,ksPassword,\"unison-saml2-rp-sig\",x509data);\n\
    \nprint(\"Storing k8s and AD certs\");\nouKs.setCertificateEntry('trusted-adldaps',k8s.getCertificate('trusted-adldaps'));\n\
    ouKs.setCertificateEntry('k8s-master',k8s.getCertificate('k8s-master'));\n\nprint(\"\
    Generate Ingress Certificate\");\n\ningressCertInfo = {\n    \"serverName\": inProp[\"\
    OU_HOST\"],\n    \"ou\":inProp[\"OU_CERT_OU\"],\n    \"o\":inProp[\"OU_CERT_O\"\
    ],\n    \"l\":inProp[\"OU_CERT_L\"],\n    \"st\":inProp[\"OU_CERT_ST\"],\n   \
    \ \"c\":inProp[\"OU_CERT_C\"],\n    \"caCert\":true,\n    \"subjectAlternativeNames\"\
    :[\n        inProp[\"K8S_DASHBOARD_HOST\"]\n    ]\n}\n\ningressX509data = CertUtils.createCertificate(ingressCertInfo);\n\
    \nprint(\"Import OpenUnison certificate into keystore\");\nouKs.setCertificateEntry('unison-ca',ingressX509data.getCertificate());\n\
    \n\nprint(\"Generating dashboard tls certificate\");\ndbCertInfo = {\n    \"serverName\"\
    :\"kubernetes-dashboard.kube-system.svc.cluster.local\",\n    \"ou\":\"kubernetes\"\
    ,\n    \"o\":\"tremolo\",\n    \"l\":\"cloud\",\n    \"st\":\"cncf\",\n    \"\
    c\":\"ea\",\n    \"caCert\":false\n}\n\ndbX509data = CertUtils.createCertificate(dbCertInfo);\n\
    \nif (use_k8s_cm) {\n  print(\"Creating CSR for API server\");\n\n\n\n  csrReq\
    \ = {\n      \"apiVersion\": \"certificates.k8s.io/v1beta1\",\n      \"kind\"\
    : \"CertificateSigningRequest\",\n      \"metadata\": {\n        \"name\": \"\
    kubernetes-dashboard.kube-system.svc.cluster.local\",\n      },\n      \"spec\"\
    : {\n        \"request\": java.util.Base64.getEncoder().encodeToString(CertUtils.generateCSR(dbX509data).getBytes(\"\
    utf-8\")),\n        \"usages\": [\n          \"digital signature\",\n        \
    \  \"key encipherment\",\n          \"server auth\"\n        ]\n      }\n    };\n\
    \n  print(\"Requesting certificate\");\n  apiResp = k8s.postWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests',JSON.stringify(csrReq));\n\
    \  print(\"Approving certificate\");\n  approveReq = JSON.parse(apiResp.data);\n\
    \  approveReq.status.conditions = [\n      {\n          \"type\":\"Approved\"\
    ,\n          \"reason\":\"OpenUnison Deployment\",\n          \"message\":\"This\
    \ CSR was approved by the OpenUnison artifact deployment job\"\n      }\n  ];\n\
    \n  apiResp = k8s.putWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/kubernetes-dashboard.kube-system.svc.cluster.local/approval',JSON.stringify(approveReq));\n\
    \  print(\"Retrieving certificate from API server\");\n  apiResp = k8s.callWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/kubernetes-dashboard.kube-system.svc.cluster.local','java.util.Base64.getDecoder().decode(JSON.parse(ws_response_json).status.certificate);check_ws_response=true;',10);\n\
    \  print(apiResp.data);\n  certResp = JSON.parse(apiResp.data);\n  b64cert = certResp.status.certificate;\n\
    \  CertUtils.importSignedCert(dbX509data,b64cert);\n} else {\n  //not using k8s\
    \ cm, so just import the dashboard cert into the openunison keystore\n  ouKs.setCertificateEntry(\"\
    trusted-k8s-dasboard\",dbX509data.getCertificate());\n}\nprint(\"Creating dashboard\
    \ secret\");\n\ndbsecret = {\n    \"apiVersion\":\"v1\",\n    \"kind\":\"Secret\"\
    ,\n    \"type\":\"Opaque\",\n    \"metadata\": {\n        \"name\":\"kubernetes-dashboard-certs\"\
    ,\n        \"namespace\":\"kube-system\"\n    },\n    \"data\":{\n        \"dashboard.crt\"\
    : java.util.Base64.getEncoder().encodeToString(CertUtils.exportCert(dbX509data.getCertificate()).getBytes(\"\
    UTF-8\")),\n        \"dashboard.key\": java.util.Base64.getEncoder().encodeToString(CertUtils.exportKey(dbX509data.getKeyData().getPrivate()).getBytes(\"\
    UTF-8\"))\n    }\n};\n\nres = k8s.postWS('/api/v1/namespaces/kube-system/secrets',JSON.stringify(dbsecret));\n\
    \nif (res[\"code\"] == 409) {\n  print(\"Secret alread exists, lets delete then\
    \ recreate\");\n  k8s.deleteWS('/api/v1/namespaces/kube-system/secrets/kubernetes-dashboard-certs');\n\
    \n  print(\"re-creating\");\n  k8s.postWS('/api/v1/namespaces/kube-system/secrets',JSON.stringify(dbsecret));\n\
    }\n\nprint(\"Create the openunison namespace\");\n\nouNS = {\n    \"apiVersion\"\
    :\"v1\",\n    \"kind\":\"Namespace\",\n    \"metadata\":{\n        \"creationTimestamp\"\
    :null,\n        \"name\":\"openunison\"\n    },\n    \"spec\":{},\n    \"status\"\
    :{}\n};\n\nk8s.postWS('/api/v1/namespaces',JSON.stringify(ouNS));\n\nprint(\"\
    Create openunison service account\");\n\nk8s.postWS('/api/v1/namespaces/openunison/serviceaccounts',JSON.stringify({\"\
    apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"creationTimestamp\"\
    :null,\"name\":\"openunison\"}}));\n\n\nprint(\"Creating RBAC Bindings\");\n\n\
    rbac = {\n    \"kind\": \"ClusterRoleBinding\",\n    \"apiVersion\": \"rbac.authorization.k8s.io/v1\"\
    ,\n    \"metadata\": {\n      \"name\": \"openunison-cluster-administrators\"\n\
    \    },\n    \"subjects\": [\n      {\n        \"kind\": \"Group\",\n        \"\
    name\": \"k8s-cluster-administrators\",\n        \"apiGroup\": \"rbac.authorization.k8s.io\"\
    \n      },\n      {\n        \"kind\": \"ServiceAccount\",\n        \"name\":\
    \ \"openunison\",\n        \"namespace\": \"openunison\"\n      }\n    ],\n  \
    \  \"roleRef\": {\n      \"kind\": \"ClusterRole\",\n      \"name\": \"cluster-admin\"\
    ,\n      \"apiGroup\": \"rbac.authorization.k8s.io\"\n    }\n  };\n\nk8s.postWS(\"\
    /apis/rbac.authorization.k8s.io/v1/clusterrolebindings\",JSON.stringify(rbac));\n\
    \nrbac = {\n    \"kind\": \"ClusterRole\",\n    \"apiVersion\": \"rbac.authorization.k8s.io/v1\"\
    ,\n    \"metadata\": {\n      \"name\": \"list-namespaces\"\n    },\n    \"rules\"\
    : [\n      {\n        \"apiGroups\": [\n          \"\"\n        ],\n        \"\
    resources\": [\n          \"namespaces\"\n        ],\n        \"verbs\": [\n \
    \         \"list\"\n        ]\n      }\n    ]\n  };\n\nk8s.postWS(\"/apis/rbac.authorization.k8s.io/v1/clusterroles\"\
    ,JSON.stringify(rbac));\n\nrbac = {\n    \"kind\": \"ClusterRoleBinding\",\n \
    \   \"apiVersion\": \"rbac.authorization.k8s.io/v1\",\n    \"metadata\": {\n \
    \     \"name\": \"openunison-cluster-list-namespaces\"\n    },\n    \"subjects\"\
    : [\n      {\n        \"kind\": \"Group\",\n        \"name\": \"users\",\n   \
    \     \"apiGroup\": \"rbac.authorization.k8s.io\"\n      }\n    ],\n    \"roleRef\"\
    : {\n      \"kind\": \"ClusterRole\",\n      \"name\": \"list-namespaces\",\n\
    \      \"apiGroup\": \"rbac.authorization.k8s.io\"\n    }\n  };\n\n\nk8s.postWS(\"\
    /apis/rbac.authorization.k8s.io/v1/clusterrolebindings\",JSON.stringify(rbac));\n\
    \nprint(\"Create Ingress TLS Secret\");\n\ningressSecret = {\n    \"apiVersion\"\
    :\"v1\",\n    \"kind\":\"Secret\",\n    \"type\":\"kubernetes.io/tls\",\n    \"\
    metadata\": {\n        \"name\":\"ou-tls-certificate\",\n        \"namespace\"\
    :\"openunison\"\n    },\n    \"data\":{\n        \"tls.crt\": java.util.Base64.getEncoder().encodeToString(CertUtils.exportCert(ingressX509data.getCertificate()).getBytes(\"\
    UTF-8\")),\n        \"tls.key\": java.util.Base64.getEncoder().encodeToString(CertUtils.exportKey(ingressX509data.getKeyData().getPrivate()).getBytes(\"\
    UTF-8\"))\n    }\n};\n\nk8s.postWS('/api/v1/namespaces/openunison/secrets',JSON.stringify(ingressSecret));\n\
    \n\n//load quartz sql\nprint(\"pulling quartz sql\");\nquartzSQL = com.tremolosecurity.kubernetes.artifacts.util.NetUtil.downloadFile(\"\
    file:///etc/input-maps/quartz.sql\");\nprint(\"parsing quartz sql\");\nparsedSQL\
    \ = com.tremolosecurity.kubernetes.artifacts.util.DbUtils.parseSQL(quartzSQL);\n\
    print(\"runnins quartz sql\");\ncom.tremolosecurity.kubernetes.artifacts.util.DbUtils.runSQL(parsedSQL,inProp[\"\
    OU_JDBC_DRIVER\"],inProp[\"OU_JDBC_URL\"],inProp[\"OU_JDBC_USER\"],inProp[\"OU_JDBC_PASSWORD\"\
    ]);\n\n//create the ip mask\nmyIp = com.tremolosecurity.kubernetes.artifacts.util.NetUtil.whatsMyIP();\n\
    mask = myIp.substring(0,myIp.indexOf(\".\"));\ninProp[\"OU_QUARTZ_MASK\"] = mask;\n\
    \nprint(\"Create activemq config secret\");\namqFileSecrets = {\n  \"apiVersion\"\
    :\"v1\",\n    \"kind\":\"Secret\",\n    \"type\":\"Opaque\",\n    \"metadata\"\
    : {\n        \"name\":\"amq-secrets\",\n        \"namespace\":\"openunison\"\n\
    \    },\n    \"data\":{\n      \"activemq.xml\":\"\"\
    ,\n      \"amq.p12\":CertUtils.encodeKeyStore(amqKS,ksPassword)\n    }\n}\n\n\
    k8s.postWS('/api/v1/namespaces/openunison/secrets',JSON.stringify(amqFileSecrets));\n\
    \nprint(\"Create activemq env var secret\");\n\namqEnvSecrets = {\n  \"apiVersion\"\
    :\"v1\",\n    \"kind\":\"Secret\",\n    \"type\":\"Opaque\",\n    \"metadata\"\
    : {\n        \"name\":\"amq-env-secrets\",\n        \"namespace\":\"openunison\"\
    \n    },\n    \"data\":{\n      \"JDBC_DRIVER\":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_DRIVER'].getBytes(\"\
    UTF-8\")),\n      \"JDBC_URL\":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_URL'].getBytes(\"\
    UTF-8\")),\n      \"JDBC_USER\":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_USER'].getBytes(\"\
    UTF-8\")),\n      \"JDBC_PASSWORD\":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_PASSWORD'].getBytes(\"\
    UTF-8\")),\n      \"TLS_KS_PWD\":java.util.Base64.getEncoder().encodeToString(ksPassword.getBytes(\"\
    UTF-8\"))\n    }\n}\n\nk8s.postWS('/api/v1/namespaces/openunison/secrets',JSON.stringify(amqEnvSecrets));\n\
    \nprint(\"Create OpenUnison Secret\");\n\n\nouSecrets = {\n    \"apiVersion\"\
    :\"v1\",\n    \"kind\":\"Secret\",\n    \"type\":\"Opaque\",\n    \"metadata\"\
    : {\n        \"name\":\"openunison-secrets\",\n        \"namespace\":\"openunison\"\
    \n    },\n    \"data\":{\n      \"openunison.yaml\":\"LS0tCm9wZW5fcG9ydDogODA4MApvcGVuX2V4dGVybmFsX3BvcnQ6IDgwCnNlY3VyZV9wb3J0OiA4NDQzCnNlY3VyZV9leHRlcm5hbF9wb3J0OiA0NDMKc2VjdXJlX2tleV9hbGlhczogInVuaXNvbi10bHMiCmZvcmNlX3RvX3NlY3VyZTogdHJ1ZQphY3RpdmVtcV9kaXI6ICIvdG1wL2FtcSIKcXVhcnR6X2RpcjogIi90bXAvcXVhcnR6IgpjbGllbnRfYXV0aDogbm9uZQphbGxvd2VkX2NsaWVudF9uYW1lczogW10KY2lwaGVyczoKLSBUTFNfUlNBX1dJVEhfUkM0XzEyOF9TSEEKLSBUTFNfUlNBX1dJVEhfQUVTXzEyOF9DQkNfU0hBCi0gVExTX1JTQV9XSVRIX0FFU18yNTZfQ0JDX1NIQQotIFRMU19SU0FfV0lUSF8zREVTX0VERV9DQkNfU0hBCi0gVExTX1JTQV9XSVRIX0FFU18xMjhfQ0JDX1NIQTI1NgotIFRMU19SU0FfV0lUSF9BRVNfMjU2X0NCQ19TSEEyNTYKcGF0aF90b19kZXBsb3ltZW50OiAiL3Vzci9sb2NhbC9vcGVudW5pc29uL3dvcmsiCnBhdGhfdG9fZW52X2ZpbGU6ICIvZXRjL29wZW51bmlzb24vb3UuZW52IgoK\"\
    ,\n      \"ou.env\":k8s.encodeMap(inProp),\n      \"unisonKeyStore.p12\":CertUtils.encodeKeyStore(ouKs,ksPassword)\n\
    \    }\n}\n\nk8s.postWS('/api/v1/namespaces/openunison/secrets',JSON.stringify(ouSecrets));\n\
    \nprint(\"Creating post deployment configmap\");\n\noidcFlags = \"--oidc-issuer-url=https://\"\
    \ + inProp[\"OU_HOST\"] + \"/auth/idp/k8sIdp\\n\" +\n            \"--oidc-client-id=kubernetes\\\
    n\" +\n            \"--oidc-username-claim=sub\\n\" + \n            \"--oidc-groups-claim=groups\\\
    n\" +\n            \"--oidc-ca-file=/etc/kubernetes/pki/ou-ca.pem\";\n\ncanonicalOidcFlags\
    \ = \"oidc-issuer-url=https://\" + inProp[\"OU_HOST\"] + \"/auth/idp/k8sIdp \"\
    \ +\n                      \"oidc-client-id=kubernetes \" +\n                \
    \      \"oidc-username-claim=sub \" + \n                      \"oidc-groups-claim=groups\
    \ \" +\n                      \"oidc-ca-file=/root/cdk/ou-ca.pem\";\n\nprint(\"\
    Runing kubectl create\");\nk8s.kubectlCreate(k8s.processTemplate(deploymentTemplate,inProp));\n\
    print(\"kubectl complete\");\n\n\n\n\n\n\n\n\n\n\n\n\ncfgMap = {\n    \"apiVersion\"\
    :\"v1\",\n    \"kind\":\"ConfigMap\",\n    \"metadata\":{\n        \"name\":\"\
    api-server-config\",\n        \"namespace\":\"openunison\"\n    },\n    \"data\"\
    :{\n        \"oidc-api-server-flags\":oidcFlags,\n        \"ou-ca.pem-base64-encoded\"\
    :CertUtils.exportCert(ingressX509data.getCertificate()),\n        \"canonical-cdk-flags\"\
    :canonicalOidcFlags,\n        \"oidc-issuer-url\":\"https://\" + inProp[\"OU_HOST\"\
    ] + \"/auth/idp/k8sIdp\",\n        \"oidc-client-id\":\"kubernetes\",\n      \
    \  \"oidc-username-claim\":\"sub\",\n        \"oidc-groups-claim\":\"groups\"\
    ,\n        \"oidc-ca-file\":\"/etc/kubernetes/pki/ou-ca.pem\"\n        \n    \
    \    //\"deployment\":java.util.Base64.getEncoder().encodeToString(k8s.processTemplate(deploymentTemplate,inProp).getBytes(\"\
    UTF-8\"))\n    }\n};\n\nk8s.postWS('/api/v1/namespaces/openunison/configmaps',JSON.stringify(cfgMap));\n\
    \nprint(\"Deleting cluster role binding\");\nk8s.deleteWS('/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/artifact-deployment');\n\
    \nprint(\"Artifacts Created, to configure the API server run 'kubectl describe\
    \ configmap api-server-config -n openunison'\");"
  openunison.yaml: "# ActiveMQ\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n\
    \    app: amq\n  name: amq\n  namespace: openunison\nspec:\n  ports:\n  - name:\
    \ amq-openwire\n    port: 61616\n    protocol: TCP\n    targetPort: 61616\n  -\
    \ name: amq-admin\n    port: 8162\n    protocol: TCP\n    targetPort: 8162\n \
    \ selector:\n    app: amq\n  sessionAffinity: ClientIP\n  sessionAffinityConfig:\n\
    \    clientIP:\n      timeoutSeconds: 10800\n  type: ClusterIP\nstatus:\n  loadBalancer:\
    \ {}\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n\
    \    app: amq\n  name: amq\n  namespace: openunison\nspec:\n  progressDeadlineSeconds:\
    \ 600\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n\
    \      app: amq\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable:\
    \ 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      creationTimestamp:\
    \ null\n      labels:\n        app: amq\n    spec:\n      containers:\n      -\
    \ env:\n        - name: JAVA_OPTS\n          value: -Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom\n\
    \        - name: JDBC_DRIVER\n          valueFrom:\n            secretKeyRef:\n\
    \              name: amq-env-secrets\n              key: JDBC_DRIVER\n       \
    \ - name: JDBC_URL\n          valueFrom:\n            secretKeyRef:\n        \
    \      name: amq-env-secrets\n              key: JDBC_URL\n        - name: JDBC_USER\n\
    \          valueFrom:\n            secretKeyRef:\n              name: amq-env-secrets\n\
    \              key: JDBC_USER\n        - name: JDBC_PASSWORD\n          valueFrom:\n\
    \            secretKeyRef:\n              name: amq-env-secrets\n            \
    \  key: JDBC_PASSWORD\n        - name: TLS_KS_PWD\n          valueFrom:\n    \
    \        secretKeyRef:\n              name: amq-env-secrets\n              key:\
    \ TLS_KS_PWD\n        image: docker.io/tremolosecurity/activemq-docker\n     \
    \   imagePullPolicy: Always\n        livenessProbe:\n          tcpSocket:\n  \
    \          port: 61616\n          failureThreshold: 10\n          initialDelaySeconds:\
    \ 10\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds:\
    \ 10\n        name: openunison\n        ports:\n        - containerPort: 8080\n\
    \          name: http\n          protocol: TCP\n        - containerPort: 8443\n\
    \          name: https\n          protocol: TCP\n        readinessProbe:\n   \
    \       tcpSocket:\n            port: 61616\n          failureThreshold: 3\n \
    \         initialDelaySeconds: 10\n          periodSeconds: 10\n          successThreshold:\
    \ 1\n          timeoutSeconds: 10\n        resources: {}\n        terminationMessagePath:\
    \ /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n\
    \        - mountPath: /etc/activemq\n          name: secret-volume\n         \
    \ readOnly: true\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n\
    \      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: secret-volume\n\
    \        secret:\n          defaultMode: 420\n          secretName: amq-secrets\n\
    ---\n\n\n\n\n\n\n\n\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n\
    \  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/backend-protocol:\
    \ https\n    nginx.ingress.kubernetes.io/secure-backends: \"true\"\n    nginx.org/ssl-services:\
    \ openunison\n    nginx.ingress.kubernetes.io/affinity: cookie\n    nginx.ingress.kubernetes.io/session-cookie-name:\
    \ INGRESSCOOKIE\n    nginx.ingress.kubernetes.io/session-cookie-hash: sha1\n \
    \ name: openunison-ingress\n  namespace: openunison\nspec:\n  rules:\n  - host:\
    \ #[OU_HOST]\n    http:\n      paths:\n      - backend:\n          serviceName:\
    \ openunison\n          servicePort: 443\n        path: /\n  - host: #[K8S_DASHBOARD_HOST]\n\
    \    http:\n      paths:\n      - backend:\n          serviceName: openunison\n\
    \          servicePort: 443\n        path: /\n  tls:\n  - hosts:\n    - #[OU_HOST]\n\
    \    - #[K8S_DASHBOARD_HOST]\n    secretName: ou-tls-certificate\nstatus:\n  loadBalancer:\
    \ {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: openunison\n\
    \  name: openunison\n  namespace: openunison\nspec:\n  ports:\n  - name: openunison-secure\n\
    \    port: 443\n    protocol: TCP\n    targetPort: 8443\n  - name: openunison-insecure\n\
    \    port: 80\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    app:\
    \ openunison\n  sessionAffinity: ClientIP\n  sessionAffinityConfig:\n    clientIP:\n\
    \      timeoutSeconds: 10800\n  type: ClusterIP\nstatus:\n  loadBalancer: {}\n\
    ---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n\
    \    app: openunison\n  name: openunison\n  namespace: openunison\nspec:\n  progressDeadlineSeconds:\
    \ 600\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n\
    \      app: openunison\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n\
    \      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n\
    \      creationTimestamp: null\n      labels:\n        app: openunison\n    spec:\n\
    \      containers:\n      - env:\n        - name: JAVA_OPTS\n          value:\
    \ -Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom\n         \
    \   -DunisonEnvironmentFile=/etc/openunison/ou.env\n        - name: fortriggerupdates\n\
    \          value: changeme\n        - name: MYVD_CONFIG_PATH\n          value:\
    \ WEB-INF/myvd.conf\n        - name: OPENUNISON_WAR_URL\n          value: https://www.tremolosecurity.com/nexus/service/local/repositories/betas/content/io/openunison/openunison-k8s-activedirectory/1.0.15/openunison-k8s-activedirectory-1.0.15.war\n\
    \        image: docker.io/tremolosecurity/openunison-docker-ubuntu\n        imagePullPolicy:\
    \ Always\n        livenessProbe:\n          exec:\n            command:\n    \
    \        - /usr/local/openunison/bin/check_alive.py\n          failureThreshold:\
    \ 10\n          initialDelaySeconds: 120\n          periodSeconds: 10\n      \
    \    successThreshold: 1\n          timeoutSeconds: 10\n        name: openunison\n\
    \        ports:\n        - containerPort: 8080\n          name: http\n       \
    \   protocol: TCP\n        - containerPort: 8443\n          name: https\n    \
    \      protocol: TCP\n        readinessProbe:\n          exec:\n            command:\n\
    \            - /usr/local/openunison/bin/check_alive.py\n            - https://127.0.0.1:8443/auth/idp/k8sIdp/.well-known/openid-configuration\n\
    \            - issuer\n          failureThreshold: 3\n          initialDelaySeconds:\
    \ 30\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds:\
    \ 10\n        resources: {}\n        terminationMessagePath: /dev/termination-log\n\
    \        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath:\
    \ /etc/openunison\n          name: secret-volume\n          readOnly: true\n \
    \     dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      terminationGracePeriodSeconds:\
    \ 30\n      serviceAccount: openunison\n      serviceAccountName: openunison\n\
    \      volumes:\n      - name: secret-volume\n        secret:\n          defaultMode:\
    \ 420\n          secretName: openunison-secrets\n---\napiVersion: v1\nkind: ServiceAccount\n\
    metadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n\
    \  namespace: kube-system\n\n---\n# ------------------- Dashboard Role & Role\
    \ Binding ------------------- #\n\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\n\
    metadata:\n  name: kubernetes-dashboard-minimal\n  namespace: kube-system\nrules:\n\
    \  # Allow Dashboard to create 'kubernetes-dashboard-key-holder' secret.\n- apiGroups:\
    \ [\"\"]\n  resources: [\"secrets\"]\n  verbs: [\"create\"]\n  # Allow Dashboard\
    \ to create 'kubernetes-dashboard-settings' config map.\n- apiGroups: [\"\"]\n\
    \  resources: [\"configmaps\"]\n  verbs: [\"create\"]\n  # Allow Dashboard to\
    \ get, update and delete Dashboard exclusive secrets.\n- apiGroups: [\"\"]\n \
    \ resources: [\"secrets\"]\n  resourceNames: [\"kubernetes-dashboard-key-holder\"\
    , \"kubernetes-dashboard-certs\"]\n  verbs: [\"get\", \"update\", \"delete\"]\n\
    \  # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config\
    \ map.\n- apiGroups: [\"\"]\n  resources: [\"configmaps\"]\n  resourceNames: [\"\
    kubernetes-dashboard-settings\"]\n  verbs: [\"get\", \"update\"]\n  # Allow Dashboard\
    \ to get metrics from heapster.\n- apiGroups: [\"\"]\n  resources: [\"services\"\
    ]\n  resourceNames: [\"heapster\"]\n  verbs: [\"proxy\"]\n- apiGroups: [\"\"]\n\
    \  resources: [\"services/proxy\"]\n  resourceNames: [\"heapster\", \"http:heapster:\"\
    , \"https:heapster:\"]\n  verbs: [\"get\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\n\
    kind: RoleBinding\nmetadata:\n  name: kubernetes-dashboard-minimal\n  namespace:\
    \ kube-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n\
    \  name: kubernetes-dashboard-minimal\nsubjects:\n- kind: ServiceAccount\n  name:\
    \ kubernetes-dashboard\n  namespace: kube-system\n\n---\n# -------------------\
    \ Dashboard Deployment ------------------- #\n\nkind: Deployment\napiVersion:\
    \ apps/v1beta2\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name:\
    \ kubernetes-dashboard\n  namespace: kube-system\nspec:\n  replicas: 1\n  revisionHistoryLimit:\
    \ 10\n  selector:\n    matchLabels:\n      k8s-app: kubernetes-dashboard\n  template:\n\
    \    metadata:\n      labels:\n        k8s-app: kubernetes-dashboard\n    spec:\n\
    \      containers:\n      - name: kubernetes-dashboard\n        image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.0\n\
    \        ports:\n        - containerPort: 8443\n          protocol: TCP\n    \
    \    args:\n          - --auto-generate-certificates\n          # Uncomment the\
    \ following line to manually specify Kubernetes API server Host\n          # If\
    \ not specified, Dashboard will attempt to auto discover the API server and connect\n\
    \          # to it. Uncomment only if the default does not work.\n          #\
    \ - --apiserver-host=http://my-address:port\n        volumeMounts:\n        -\
    \ name: kubernetes-dashboard-certs\n          mountPath: /certs\n          # Create\
    \ on-disk volume to store exec logs\n        - mountPath: /tmp\n          name:\
    \ tmp-volume\n        livenessProbe:\n          httpGet:\n            scheme:\
    \ HTTPS\n            path: /\n            port: 8443\n          initialDelaySeconds:\
    \ 30\n          timeoutSeconds: 30\n      volumes:\n      - name: kubernetes-dashboard-certs\n\
    \        secret:\n          secretName: kubernetes-dashboard-certs\n      - name:\
    \ tmp-volume\n        emptyDir: {}\n      serviceAccountName: kubernetes-dashboard\n\
    \      # Comment the following tolerations if Dashboard must not be deployed on\
    \ master\n      tolerations:\n      - key: node-role.kubernetes.io/master\n  \
    \      effect: NoSchedule\n\n---\n# ------------------- Dashboard Service -------------------\
    \ #\n\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n\
    \  name: kubernetes-dashboard\n  namespace: kube-system\nspec:\n  ports:\n   \
    \ - port: 443\n      targetPort: 8443\n  selector:\n    k8s-app: kubernetes-dashboard"
  quartz.sql: "# By: Ron Cordell - roncordell\n#  I didn't see this anywhere, so I\
    \ thought I'd post it here. This is the script from Quartz to create the tables\
    \ in a MySQL database, modified to use INNODB instead of MYISAM.\n\n\n# make sure\
    \ you have UTF-8 collaction for best .NET interoperability\n# CREATE DATABASE\
    \ quartznet CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nDROP TABLE IF\
    \ EXISTS QRTZ_FIRED_TRIGGERS;\nDROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;\n\
    DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;\nDROP TABLE IF EXISTS QRTZ_LOCKS;\n\
    DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;\nDROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;\n\
    DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;\nDROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;\n\
    DROP TABLE IF EXISTS QRTZ_TRIGGERS;\nDROP TABLE IF EXISTS QRTZ_JOB_DETAILS;\n\
    DROP TABLE IF EXISTS QRTZ_CALENDARS;\n\nCREATE TABLE QRTZ_JOB_DETAILS(\nSCHED_NAME\
    \ VARCHAR(120) NOT NULL,\nJOB_NAME VARCHAR(200) NOT NULL,\nJOB_GROUP VARCHAR(200)\
    \ NOT NULL,\nDESCRIPTION VARCHAR(250) NULL,\nJOB_CLASS_NAME VARCHAR(250) NOT NULL,\n\
    IS_DURABLE BOOLEAN NOT NULL,\nIS_NONCONCURRENT BOOLEAN NOT NULL,\nIS_UPDATE_DATA\
    \ BOOLEAN NOT NULL,\nREQUESTS_RECOVERY BOOLEAN NOT NULL,\nJOB_DATA BLOB NULL,\n\
    PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))\nENGINE=InnoDB;\n\nCREATE TABLE QRTZ_TRIGGERS\
    \ (\nSCHED_NAME VARCHAR(120) NOT NULL,\nTRIGGER_NAME VARCHAR(200) NOT NULL,\n\
    TRIGGER_GROUP VARCHAR(200) NOT NULL,\nJOB_NAME VARCHAR(200) NOT NULL,\nJOB_GROUP\
    \ VARCHAR(200) NOT NULL,\nDESCRIPTION VARCHAR(250) NULL,\nNEXT_FIRE_TIME BIGINT(19)\
    \ NULL,\nPREV_FIRE_TIME BIGINT(19) NULL,\nPRIORITY INTEGER NULL,\nTRIGGER_STATE\
    \ VARCHAR(16) NOT NULL,\nTRIGGER_TYPE VARCHAR(8) NOT NULL,\nSTART_TIME BIGINT(19)\
    \ NOT NULL,\nEND_TIME BIGINT(19) NULL,\nCALENDAR_NAME VARCHAR(200) NULL,\nMISFIRE_INSTR\
    \ SMALLINT(2) NULL,\nJOB_DATA BLOB NULL,\nPRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),\n\
    FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)\nREFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))\n\
    ENGINE=InnoDB;\n\nCREATE TABLE QRTZ_SIMPLE_TRIGGERS (\nSCHED_NAME VARCHAR(120)\
    \ NOT NULL,\nTRIGGER_NAME VARCHAR(200) NOT NULL,\nTRIGGER_GROUP VARCHAR(200) NOT\
    \ NULL,\nREPEAT_COUNT BIGINT(7) NOT NULL,\nREPEAT_INTERVAL BIGINT(12) NOT NULL,\n\
    TIMES_TRIGGERED BIGINT(10) NOT NULL,\nPRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),\n\
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)\nREFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))\n\
    ENGINE=InnoDB;\n\nCREATE TABLE QRTZ_CRON_TRIGGERS (\nSCHED_NAME VARCHAR(120) NOT\
    \ NULL,\nTRIGGER_NAME VARCHAR(200) NOT NULL,\nTRIGGER_GROUP VARCHAR(200) NOT NULL,\n\
    CRON_EXPRESSION VARCHAR(120) NOT NULL,\nTIME_ZONE_ID VARCHAR(80),\nPRIMARY KEY\
    \ (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),\nFOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)\n\
    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))\nENGINE=InnoDB;\n\
    \nCREATE TABLE QRTZ_SIMPROP_TRIGGERS\n  (          \n    SCHED_NAME VARCHAR(120)\
    \ NOT NULL,\n    TRIGGER_NAME VARCHAR(200) NOT NULL,\n    TRIGGER_GROUP VARCHAR(200)\
    \ NOT NULL,\n    STR_PROP_1 VARCHAR(512) NULL,\n    STR_PROP_2 VARCHAR(512) NULL,\n\
    \    STR_PROP_3 VARCHAR(512) NULL,\n    INT_PROP_1 INT NULL,\n    INT_PROP_2 INT\
    \ NULL,\n    LONG_PROP_1 BIGINT NULL,\n    LONG_PROP_2 BIGINT NULL,\n    DEC_PROP_1\
    \ NUMERIC(13,4) NULL,\n    DEC_PROP_2 NUMERIC(13,4) NULL,\n    BOOL_PROP_1 BOOLEAN\
    \ NULL,\n    BOOL_PROP_2 BOOLEAN NULL,\n    TIME_ZONE_ID VARCHAR(80) NULL,\n \
    \   PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),\n    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)\
    \ \n    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))\nENGINE=InnoDB;\n\
    \nCREATE TABLE QRTZ_BLOB_TRIGGERS (\nSCHED_NAME VARCHAR(120) NOT NULL,\nTRIGGER_NAME\
    \ VARCHAR(200) NOT NULL,\nTRIGGER_GROUP VARCHAR(200) NOT NULL,\nBLOB_DATA BLOB\
    \ NULL,\nPRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),\nINDEX (SCHED_NAME,TRIGGER_NAME,\
    \ TRIGGER_GROUP),\nFOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)\nREFERENCES\
    \ QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))\nENGINE=InnoDB;\n\nCREATE\
    \ TABLE QRTZ_CALENDARS (\nSCHED_NAME VARCHAR(120) NOT NULL,\nCALENDAR_NAME VARCHAR(200)\
    \ NOT NULL,\nCALENDAR BLOB NOT NULL,\nPRIMARY KEY (SCHED_NAME,CALENDAR_NAME))\n\
    ENGINE=InnoDB;\n\nCREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (\nSCHED_NAME VARCHAR(120)\
    \ NOT NULL,\nTRIGGER_GROUP VARCHAR(200) NOT NULL,\nPRIMARY KEY (SCHED_NAME,TRIGGER_GROUP))\n\
    ENGINE=InnoDB;\n\nCREATE TABLE QRTZ_FIRED_TRIGGERS (\nSCHED_NAME VARCHAR(120)\
    \ NOT NULL,\nENTRY_ID VARCHAR(140) NOT NULL,\nTRIGGER_NAME VARCHAR(200) NOT NULL,\n\
    TRIGGER_GROUP VARCHAR(200) NOT NULL,\nINSTANCE_NAME VARCHAR(200) NOT NULL,\nFIRED_TIME\
    \ BIGINT(19) NOT NULL,\nSCHED_TIME BIGINT(19) NOT NULL,\nPRIORITY INTEGER NOT\
    \ NULL,\nSTATE VARCHAR(16) NOT NULL,\nJOB_NAME VARCHAR(200) NULL,\nJOB_GROUP VARCHAR(200)\
    \ NULL,\nIS_NONCONCURRENT BOOLEAN NULL,\nREQUESTS_RECOVERY BOOLEAN NULL,\nPRIMARY\
    \ KEY (SCHED_NAME,ENTRY_ID))\nENGINE=InnoDB;\n\nCREATE TABLE QRTZ_SCHEDULER_STATE\
    \ (\nSCHED_NAME VARCHAR(120) NOT NULL,\nINSTANCE_NAME VARCHAR(200) NOT NULL,\n\
    LAST_CHECKIN_TIME BIGINT(19) NOT NULL,\nCHECKIN_INTERVAL BIGINT(19) NOT NULL,\n\
    PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))\nENGINE=InnoDB;\n\nCREATE TABLE QRTZ_LOCKS\
    \ (\nSCHED_NAME VARCHAR(120) NOT NULL,\nLOCK_NAME VARCHAR(40) NOT NULL,\nPRIMARY\
    \ KEY (SCHED_NAME,LOCK_NAME))\nENGINE=InnoDB;\n\nCREATE INDEX IDX_QRTZ_J_REQ_RECOVERY\
    \ ON QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY);\nCREATE INDEX IDX_QRTZ_J_GRP\
    \ ON QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP);\n\nCREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);\n\
    CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);\nCREATE INDEX\
    \ IDX_QRTZ_T_C ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);\nCREATE INDEX IDX_QRTZ_T_G\
    \ ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);\nCREATE INDEX IDX_QRTZ_T_STATE ON\
    \ QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);\nCREATE INDEX IDX_QRTZ_T_N_STATE ON\
    \ QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);\nCREATE\
    \ INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);\n\
    CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);\n\
    CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);\n\
    CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);\n\
    CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);\n\
    CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);\n\
    \nCREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);\n\
    CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);\n\
    CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);\n\
    CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);\nCREATE\
    \ INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);\n\
    CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);\n\
    \ncommit; \n"
kind: ConfigMap
metadata:
  name: deployment-scripts
  namespace: openunison-deploy
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: artifact-deployment
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  namespace: openunison-deploy
  name: default
---
apiVersion: batch/v1
kind: Job
metadata:
  name: artifact-deployment
  namespace: openunison-deploy
spec:
  template:
    spec:
      containers:
      - name: artifact-deployment
        image: docker.io/tremolosecurity/kubernetes-artifact-deployment:latest
        command: ["java", "-jar", "/usr/local/artifactdeploy/artifact-deploy.jar",  "-extraCertsPath","/etc/extracerts","-installScriptURL", "file:///etc/input-maps/deploy.js","-kubernetesURL","https://kubernetes.default.svc.cluster.local","-rootCaPath","/var/run/secrets/kubernetes.io/serviceaccount/ca.crt","-secretsPath","/etc/secrets/input.props","-tokenPath","/var/run/secrets/kubernetes.io/serviceaccount/token","-deploymentTemplate","file:///etc/input-maps/openunison.yaml"]
        volumeMounts:
          - name: secrets-dir
            mountPath: "/etc/secrets"
            readOnly: true
          - name: extra-certs-dir
            mountPath: "/etc/extracerts"
            readOnly: true
          - name: input-maps
            mountPath: "/etc/input-maps"
            readOnly: true 
      restartPolicy: Never
      volumes:
        - name : secrets-dir
          secret:
            secretName: input
        - name : extra-certs-dir
          configMap:
            name: extracerts
        - name: input-maps
          configMap:
            name: deployment-scripts
  backoffLimit: 1